from web3 import Web3
import requests
import json
import time

# Connect to Ethereum node using WebSocket for real-time updates
web3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/YOUR_INFURA_PROJECT_ID'))

# USDT contract address and ABI (simplified for Transfer event)
usdt_address = '0xdAC17F958D2ee523a2206206994597C13D831ec7'
usdt_abi = '''
[
    {
        "anonymous": false,
        "inputs": [
            {"indexed": true, "name": "from", "type": "address"},
            {"indexed": true, "name": "to", "type": "address"},
            {"indexed": false, "name": "value", "type": "uint256"}
        ],
        "name": "Transfer",
        "type": "event"
    }
]
'''

# Set up contract instance
usdt_contract = web3.eth.contract(address=usdt_address, abi=usdt_abi)

# Filter for Transfer events to the ZERO address
zero_address = '0x0000000000000000000000000000000000000000'

def handle_event(event):
    # Parse and log event details
    event_details = {
        'transactionHash': event['transactionHash'].hex(),
        'blockNumber': event['blockNumber'],
        'from': event['args']['from'],
        'to': event['args']['to'],
        'value': event['args']['value']
    }
    print(f"Transfer to ZERO address detected: {event_details}")
    
    # Send notification
    send_notification(event_details)

def send_notification(event_details):
    message = f"USDT transfer detected: {event_details}"
    # Example using SendGrid to send an email
    response = requests.post("https://api.sendgrid.com/v3/mail/send", headers={
        'Authorization': 'Bearer YOUR_SENDGRID_API_KEY',
        'Content-Type': 'application/json'
    }, json={
        "personalizations": [{"to": [{"email": "team@example.com"}]}],
        "from": {"email": "noreply@example.com"},
        "subject": "USDT Transfer Alert",
        "content": [{"type": "text/plain", "value": message}]
    })
    return response

def main():
    # Subscribe to Transfer events
    event_filter = usdt_contract.events.Transfer.createFilter(fromBlock='latest', argument_filters={'to': zero_address})
    
    while True:
        for event in event_filter.get_new_entries():
            handle_event(event)
        time.sleep(10)

if _name_ == "_main_":
    main()
