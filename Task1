from web3 import Web3
import requests
import time

# Configuration
INFURA_URL = "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"
USDT_CONTRACT_ADDRESS = "0xdAC17F958D2ee523a2206206994597C13D831ec7"
ZERO_ADDRESS = "0x0000000000000000000000000000000000000000"
SLACK_WEBHOOK_URL = "YOUR_SLACK_WEBHOOK_URL"

# Connect to Ethereum node
web3 = Web3(Web3.HTTPProvider(INFURA_URL))

# USDT Transfer Event Signature
TRANSFER_EVENT_SIGNATURE = web3.keccak(text="Transfer(address,address,uint256)").hex()

# Function to notify via Slack
def notify_slack(message):
    payload = {"text": message}
    requests.post(SLACK_WEBHOOK_URL, json=payload)

# Function to monitor transfers to zero address
def monitor_transfers():
    usdt_contract = web3.eth.contract(address=USDT_CONTRACT_ADDRESS, abi=[{"anonymous": False, "inputs": [{"indexed": True, "name": "from", "type": "address"}, {"indexed": True, "name": "to", "type": "address"}, {"indexed": False, "name": "value", "type": "uint256"}], "name": "Transfer", "type": "event"}])
    filter_params = {
        "fromBlock": "latest",
        "toBlock": "latest",
        "address": USDT_CONTRACT_ADDRESS,
        "topics": [TRANSFER_EVENT_SIGNATURE, None, web3.toHex(hexstr=ZERO_ADDRESS)]
    }

    while True:
        # Check for events
        events = web3.eth.get_logs(filter_params)
        for event in events:
            tx_hash = event['transactionHash'].hex()
            from_address = event['topics'][1].hex()
            to_address = web3.toChecksumAddress(event['topics'][2])
            value = web3.fromWei(int(event['data'], 16), 'ether')
            
            if to_address == ZERO_ADDRESS:
                message = f"USDT Transfer to Zero Address Detected:\nTx Hash: {tx_hash}\nFrom: {from_address}\nValue: {value} USDT"
                notify_slack(message)

        # Wait for a minute before checking again
        time.sleep(60)

# Run the monitoring function
if __name__ == "__main__":
    monitor_transfers()
